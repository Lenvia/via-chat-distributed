// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: gpt/gpt.proto

package gpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GptMsgSender_Send_FullMethodName = "/GptMsgSender/Send"
)

// GptMsgSenderClient is the client API for GptMsgSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GptMsgSenderClient interface {
	Send(ctx context.Context, in *GptMsgRequest, opts ...grpc.CallOption) (*GptMsgResponse, error)
}

type gptMsgSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewGptMsgSenderClient(cc grpc.ClientConnInterface) GptMsgSenderClient {
	return &gptMsgSenderClient{cc}
}

func (c *gptMsgSenderClient) Send(ctx context.Context, in *GptMsgRequest, opts ...grpc.CallOption) (*GptMsgResponse, error) {
	out := new(GptMsgResponse)
	err := c.cc.Invoke(ctx, GptMsgSender_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GptMsgSenderServer is the server API for GptMsgSender service.
// All implementations must embed UnimplementedGptMsgSenderServer
// for forward compatibility
type GptMsgSenderServer interface {
	Send(context.Context, *GptMsgRequest) (*GptMsgResponse, error)
	mustEmbedUnimplementedGptMsgSenderServer()
}

// UnimplementedGptMsgSenderServer must be embedded to have forward compatible implementations.
type UnimplementedGptMsgSenderServer struct {
}

func (UnimplementedGptMsgSenderServer) Send(context.Context, *GptMsgRequest) (*GptMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedGptMsgSenderServer) mustEmbedUnimplementedGptMsgSenderServer() {}

// UnsafeGptMsgSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GptMsgSenderServer will
// result in compilation errors.
type UnsafeGptMsgSenderServer interface {
	mustEmbedUnimplementedGptMsgSenderServer()
}

func RegisterGptMsgSenderServer(s grpc.ServiceRegistrar, srv GptMsgSenderServer) {
	s.RegisterService(&GptMsgSender_ServiceDesc, srv)
}

func _GptMsgSender_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GptMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GptMsgSenderServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GptMsgSender_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GptMsgSenderServer).Send(ctx, req.(*GptMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GptMsgSender_ServiceDesc is the grpc.ServiceDesc for GptMsgSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GptMsgSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GptMsgSender",
	HandlerType: (*GptMsgSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _GptMsgSender_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gpt/gpt.proto",
}
